void function(root,factory){if(typeof define==="function"&&define.amd){define(factory)}else if(typeof exports==="object"){module.exports=factory()}else{Ractive.adaptors.Ractive=factory(root.Ractive)}}(this,function(){var Adaptor={filter:filter,wrap:wrap};Adaptor.fireWrapEvents=true;Adaptor.maxKeyLength=2048;function filter(child,keypath,parent){if(!isRactiveInstance(child))return false;if(parent&&parent._ractiveWraps&&parent._ractiveWraps[keypath]){return false}return true}var locked=Adaptor.locked={};function lock(key,fn){if(locked[key])return;try{locked[key]=true;return fn()}finally{delete locked[key]}}function wrap(parent,child,keypath,prefixer){setup();return{get:get,set:set,reset:reset,teardown:teardown};function setup(){checkForRecursion();markAsWrapped();propagateSubinstances();child.on("change",onChange);if(Adaptor.fireWrapEvents){child.fire("wrap",parent,keypath);parent.fire("wrapchild",child,keypath)}}function propagateSubinstances(){var re={};each(child.get(),function(val,key){if(isRactiveInstance(val))re[key]=val});parent.set(prefixer(re))}function teardown(){delete parent._ractiveWraps[keypath];child.off("change",onChange);if(Adaptor.fireWrapEvents){child.fire("unwrap",parent,keypath);parent.fire("unwrapchild",child,keypath)}}function onChange(updates){each(updates,function(value,key){lock(child._guid+key,function(){parent.set(keypath+"."+key,value)})})}function get(){if(!child.computed)return child.get();var re={};each(child.get(),function(val,key){re[key]=val});each(child.computed,function(_,key){if(typeof re[key]==="undefined"){re[key]=child.get(key)}});return re}function set(key,value){lock(child._guid+key,function(){child.set(key,value)})}function reset(object){if(object&&object.constructor===Object){child.set(object)}else{return false}}function checkForRecursion(){if(keypath&&keypath.length>Adaptor.maxKeyLength){throw new Error("Keypath too long (possible circular dependency)")}}function markAsWrapped(){if(!parent._ractiveWraps)parent._ractiveWraps={};parent._ractiveWraps[keypath]=child}}function each(obj,fn){for(var key in obj){if(obj.hasOwnProperty(key))fn(obj[key],key)}}function isRactiveInstance(obj){return obj&&obj.constructor&&typeof obj._guid==="string"&&typeof obj.set==="function"&&typeof obj.off==="function"&&typeof obj.on==="function"&&typeof obj.constructor.defaults==="object"}return Adaptor});